version: '3'

services:
  jupyterhub:
    build: jupyterhub
    image: jupyterhub_img
    container_name: jupyterhub
    expose:
      - 8000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
#      - /var/data/jupyterhub:/srv/jupyterhub
    environment:
      - DOCKER_JUPYTER_CONTAINER=jupyterlab_img
      - DOCKER_NETWORK_NAME=traefik
      - HUB_IP=jupyterhub
      - HOST
      - JUPYTERHUB_CRYPT_KEY=${JUPYTERHUB_CRYPT_KEY}
      
      - LTI_CLIENT_KEY=${LTI_CLIENT_KEY}
      - LTI_SHARED_SECRET=${LTI_SHARED_SECRET}
      - LTI13_PRIVATE_KEY=${LTI13_PRIVATE_KEY}

      - KEYCLOAK_LOGOUT_URL=${KEYCLOAK_LOGOUT_URL}

      - OAUTH2_TLS_VERIFY=${OAUTH2_TLS_VERIFY}
      - OAUTH2_AUTHORIZE_URL=${OAUTH2_AUTHORIZE_URL}
      - OAUTH2_TOKEN_URL=${OAUTH2_TOKEN_URL}
      - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID}
      - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET}
      - OAUTH_CALLBACK_URL=${OAUTH_CALLBACK_URL}
      - OAUTH2_USERDATA_URL=${OAUTH2_USERDATA_URL}
    networks:
      - traefik
    labels:
      - traefik.enable=true
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-core.rule=PathPrefix(`/newhub`)
      
    restart: on-failure

  jupyterlab:
    build:
      context: jupyterlab
    image: jupyterlab_img
    container_name: jupyterlab-throaway
    network_mode: none
    command: echo

  postgres:
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRESQL_DB}
      POSTGRES_USER: ${POSTGRESQL_USER}
      POSTGRES_PASSWORD: ${POSTGRESQL_PASS}
    networks:
      - local-keycloak
    logging:
      driver: none

  keycloak:
    depends_on:
      - postgres
    container_name: local_keycloak
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres
      DB_DATABASE: ${POSTGRESQL_DB}
      DB_USER: ${POSTGRESQL_USER}
      DB_PASSWORD: ${POSTGRESQL_PASS}
    image: jboss/keycloak:${KEYCLOAK_VERSION}
    ports:
      - "8088:8080"
    restart: unless-stopped
    networks:
      - local-keycloak
    logging:
      driver: none

  #reverse-proxy:
    #image: traefik
    #container_name: reverse-proxy
    #ports:
      #- "80:80"
      #- "443:443"
      #- "8080:8080"
    #volumes:
      #- ./reverse-proxy/traefik.toml:/etc/traefik/traefik.toml
      #- /etc/certs:/etc/certs
      #- /var/run/docker.sock:/var/run/docker.sock
    #restart: on-failure

networks:
  local-keycloak:
    name: local-keycloak
  traefik:
    name: traefik